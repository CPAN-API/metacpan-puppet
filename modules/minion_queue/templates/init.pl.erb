#!<%= @perlbin %>/perl
<%# vim: set syn=perl.eruby ts=4 sts=4 sw=4 et sta: %>
# Generated by puppet.

### BEGIN INIT INFO
# Provides:          <%= @name %>
# Required-Start:    $all
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts <%= @name %>
# Description:       Starts <%= @name %>
### END INIT INFO`

use strict;
use warnings;

use Daemon::Control;
use File::Path 2.06 ();    # core

my $name = "minion_queue";

my $code_base_name = 'metacpan-api';

my $user = '<%= @user %>';
my $home = "/home/${user}/${code_base_name}";

my %dirs = (
    pid => "$home/var/run",
    log => "$home/var/log",
);
my $carton    = '<%= @perlbin %>/carton';
my $workers   = <%= @workers %>;

my $carton_dir = "/home/${user}/carton";
my $carton_path = "${carton_dir}/${code_base_name}";

# TODO: Should we use the ./bin/carton wrapper instead of setting this here?
$ENV{PERL_CARTON_PATH} = $carton_path;

# We need the right perl in the ENV
$ENV{PATH} = '<%= @perlbin %>:' . $ENV{PATH};

#  carton exec bin/queue.pl
my @program_args = (
    'exec', "${home}/bin/queue.pl",
    'minion', 'worker',
    '-j', $workers
);

my $args = {
    directory    => $home,
    fork         => 2,
    group        => $user,
    lsb_desc     => "Starts $name",
    lsb_sdesc    => "Starts $name",
    name         => $name,
    pid_file     => "$dirs{pid}/${name}.pid",
    program      => $carton,
    program_args => \@program_args,
    stderr_file  => "$dirs{log}/${name}-error.log",
    stdout_file  => "$dirs{log}/${name}-stdout.log",
    user         => $user,
};

exit Daemon::Control->new($args)->run;
